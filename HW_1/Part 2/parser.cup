/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal String     PLUS, LPAREN, RPAREN, LCURLY, RCURLY, COMMA, IF, ELSE, PREFIX, REVERSE, IDENTIFIER;
terminal String     STRING_LITERAL;

/*  Non terminals */
non terminal String syn, expr_list, rest_expr, call_list, call, def, def_args, rest_args, call_args, call_arg, concat, if_stmt, rest_call;
non terminal String body, body_concat, body_func, body_if, re_bod_args, body_args;
non terminal String prefix_stmt, body_prefix;

/**
 *  Precedence Declarations
 */
precedence left IF, ELSE;
precedence left PLUS;
precedence left PREFIX;
precedence left REVERSE;

/**
 *  The Grammar Rules
 */
syn         ::= expr_list:e     {: System.out.println("public class main {\n" + e + "}"); :}
            ;

/* Has to declare at least one function before moving on to calling functions or declaring more functions */
expr_list   ::= def:d rest_expr:re      {: RESULT = re + d; :}
            ;

rest_expr   ::= def:d rest_expr:re      {: RESULT = re + d; :}
            |   call_list:cl            {: RESULT = "public static void main(String[] args) {\n" + cl + "\n}\n"; :}
            ;

def         ::= IDENTIFIER:id LPAREN def_args:ar RPAREN LCURLY body:b RCURLY    {: RESULT = "public static String " + id + "(" + ar + ") {\n" + "return " + b + ";" + "\n}\n"; :}
            |   IDENTIFIER:id LPAREN RPAREN LCURLY body:b RCURLY                {: RESULT = "public static String " + id + "() {\n" + "return " + b + ";" + "\n}\n"; :}
            ;

/* The arguments of function definitions (when in fact the function has arguments) */
def_args    ::= IDENTIFIER:id rest_args:ra              {: RESULT = "String " + id + ra; :}
            ;

rest_args   ::= COMMA IDENTIFIER:id rest_args:ra        {: RESULT = ", " + "String " + id + ra; :}
            |                                           {: RESULT = ""; :}
            ;

/* Grammar for everything that can be found in the body of a function */
body        ::= STRING_LITERAL:str                      {: RESULT = str; :} /*"\"" + str + "\""*/
            |   body_if:iff                             {: RESULT = iff; :}
            |   body_func:func                          {: RESULT = func; :}
            |   body_concat:con                         {: RESULT = con; :}
            |   REVERSE STRING_LITERAL
            |   REVERSE IDENTIFIER
            |   IDENTIFIER:id                           {: RESULT = id; :}
            ;

/* Calling functions inside another function */
body_func   ::= IDENTIFIER LPAREN body_args RPAREN
            |   IDENTIFIER LPAREN RPAREN
            ;

body_args   ::= body re_bod_args
            ;

re_bod_args ::= COMMA body re_bod_args
            |
            ;

body_concat ::= body PLUS body
            ;

body_if     ::= IF LPAREN body_prefix RPAREN body ELSE body
            ;

/* Prefix which is the only logical expression */
body_prefix ::= body PREFIX body
            ;

/* Can call a function and use an if statement inside the "main" */
call_list   ::= call call_list
            |   if_stmt call_list
            |
            ;

call        ::= IDENTIFIER LPAREN call_args RPAREN
            |   IDENTIFIER LPAREN RPAREN
            ;

/* The arguments for function calls */
call_args   ::= call_arg rest_call
            ;

rest_call   ::= COMMA call_arg rest_call
            |
            ;

/* Grammar for each argument when calling a function */
call_arg    ::= STRING_LITERAL
            |   if_stmt
            |   call
            |   concat
            |   REVERSE STRING_LITERAL
            ;

/* Supporting concatenation */
concat      ::= call_arg PLUS call_arg
            ;

if_stmt     ::= IF LPAREN prefix_stmt RPAREN call_arg ELSE call_arg
            ;

/* Supporting prefix which is the only logical expression */
prefix_stmt ::= call_arg PREFIX call_arg
            ;