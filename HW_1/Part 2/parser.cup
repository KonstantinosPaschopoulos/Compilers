/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal String     PLUS, LPAREN, RPAREN, LCURLY, RCURLY, COMMA, IF, ELSE, PREFIX, REVERSE, IDENTIFIER;
terminal String     STRING_LITERAL;

/*  Non terminals */
non terminal String syn, expr_list, rest_expr, call_list, call, def, def_args, rest_args, call_args, call_stm, concat, if_stmt, rest_call;
non terminal String body, body_concat, body_func, body_if, re_bod_args, body_args;
non terminal String prefix_stmt, body_prefix;

/**
 *  Precedence Declarations
 */
precedence left IF, ELSE;
precedence left PREFIX;
precedence left PLUS;
precedence left REVERSE;

/**
 *  The Grammar Rules
 */
syn         ::= expr_list:e     {: System.out.println("public class Main {\n" + e + "}"); :}
            ;

/* Has to declare at least one function before moving on to calling functions or declaring more functions */
expr_list   ::= def:d rest_expr:re      {: RESULT = d + re; :}
            ;

// TODO make decl be empty and calls not
rest_expr   ::= def:d rest_expr:re      {: RESULT = d + re; :}
            |   call_list:cl            {: RESULT = "public static void main(String[] args) {\n" + cl + "}\n"; :}
            ;

def         ::= IDENTIFIER:id LPAREN def_args:ar RPAREN LCURLY body:b RCURLY    {: RESULT = "public static String " + id + "(" + ar + ") {\n" + "return " + b + ";" + "\n}\n"; :}
            |   IDENTIFIER:id LPAREN RPAREN LCURLY body:b RCURLY                {: RESULT = "public static String " + id + "() {\n" + "return " + b + ";" + "\n}\n"; :}
            ;

/* The arguments of function definitions (when in fact the function has arguments) */
def_args    ::= IDENTIFIER:id rest_args:ra              {: RESULT = "String " + id + ra; :}
            ;

rest_args   ::= COMMA IDENTIFIER:id rest_args:ra        {: RESULT = ", " + "String " + id + ra; :}
            |                                           {: RESULT = ""; :}
            ;

/* Grammar for everything that can be found in the body of a function */
body        ::= STRING_LITERAL:str                      {: RESULT = str; :} /*"\"" + str + "\""*/
            |   body_if:iff                             {: RESULT = iff; :}
            |   body_func:func                          {: RESULT = func; :}
            |   body_concat:con                         {: RESULT = con; :}
            |   REVERSE body:b                          {: RESULT = "new StringBuffer(" + b + ").reverse().toString()"; :}
            |   IDENTIFIER:id                           {: RESULT = id; :}
            ;

/* Calling functions inside another function */
body_func   ::= IDENTIFIER:id LPAREN body_args:arg RPAREN   {: RESULT = id + "(" + arg + ")"; :}   
            |   IDENTIFIER:id LPAREN RPAREN                 {: RESULT = id + "(" + ")"; :}
            ;

body_args   ::= body:b re_bod_args:re                   {: RESULT = b + re; :}
            ;

re_bod_args ::= COMMA body:b re_bod_args:re             {: RESULT = ", " + b + re; :}
            |                                           {: RESULT = ""; :}
            ;

body_concat ::= body:b1 PLUS body:b2                    {: RESULT = b1 + " + " + b2; :}
            ;

body_if     ::= IF LPAREN body_prefix:bool RPAREN body:b1 ELSE body:b2      {: RESULT = "(" + bool + " ? " + b1 + " : " + b2 + ")"; :}
            ;

/* Prefix which is the only logical expression */
body_prefix ::= body:b1 PREFIX body:b2                  {: RESULT = b2 + ".startsWith(" + b1 + ")"; :}
            ;

/* The list of outputs inside the main */
call_list   ::= call_stm:c call_list:cl                     {: RESULT = "System.out.println(" + c + ");\n" + cl; :}
            |                                               {: RESULT = ""; :}
            ;

/* Everything that can be inside the main or inside the arguments of a function call */
call_stm    ::= STRING_LITERAL:str                      {: RESULT = str; :}
            |   if_stmt:ifs                             {: RESULT = ifs; :}
            |   call:cal                                {: RESULT = cal; :}
            |   concat:con                              {: RESULT = con; :}
            |   REVERSE call_stm:ca                     {: RESULT = "new StringBuffer(" + ca + ").reverse().toString()"; :}
            ;

call        ::= IDENTIFIER:id LPAREN call_args:ca RPAREN    {: RESULT = id + "(" + ca + ")"; :}
            |   IDENTIFIER:id LPAREN RPAREN                 {: RESULT = id + "()"; :}
            ;

/* The arguments for function calls */
call_args   ::= call_stm:ca rest_call:re                {: RESULT = ca + re; :}
            ;

rest_call   ::= COMMA call_stm:ca rest_call:re          {: RESULT = ", " + ca + re; :}
            |                                           {: RESULT = ""; :}
            ;

/* Supporting concatenation */
concat      ::= call_stm:c1 PLUS call_stm:c2            {: RESULT = c1 + " + " + c2; :}
            ;

if_stmt     ::= IF LPAREN prefix_stmt:bool RPAREN call_stm:c1 ELSE call_stm:c2      {: RESULT = "(" + bool + " ? " + c1 + " : " + c2 + ")"; :}
            ;

/* Supporting prefix which is the only logical expression */
prefix_stmt ::= call_stm:c1 PREFIX call_stm:c2          {: RESULT = c2 + ".startsWith(" + c1 + ")"; :}
            ;