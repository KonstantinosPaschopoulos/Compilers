/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            PLUS, LPAREN, RPAREN, LCURLY, RCURLY, COMMA, IF, ELSE, PREFIX, REVERSE, IDENTIFIER;
terminal String     STRING_LITERAL;

/*  Non terminals */
non terminal String syn, expr_list, rest_expr, call_list, call, def, def_args, rest_args, def_body, call_args, call_arg, concat, if_stmt, rest_call;
non terminal        prefix_stmt;

/**
 *  Precedence Declarations
 */
precedence left IF, ELSE;
precedence left PLUS;
precedence left PREFIX;
precedence left REVERSE;

/**
 *  The Grammar Rules
 */
syn         ::= expr_list
            ;

/* Has to declare at least one function before moving on to calling functions or declaring more functions */
expr_list   ::= def rest_expr
            ;

rest_expr   ::= def rest_expr
            |   call_list
            ;

def         ::= IDENTIFIER LPAREN def_args RPAREN LCURLY def_body RCURLY
            |   IDENTIFIER LPAREN RPAREN LCURLY def_body RCURLY
            ;

/* The arguments for function definitions (when in fact the function has arguments) */
def_args    ::= IDENTIFIER rest_args
            ;

rest_args   ::= COMMA IDENTIFIER rest_args
            |
            ;

/* The body for the function definitions */
def_body    ::= IDENTIFIER
            |   STRING_LITERAL
            |
            ;

/* Can either call a function or use an if statement inside the "main" */
call_list   ::= call call_list
            |   if_stmt call_list
            |
            ;

call        ::= IDENTIFIER LPAREN call_args RPAREN
            |   IDENTIFIER LPAREN RPAREN
            ;

/* The arguments for function calls */
call_args   ::= call_arg rest_call
            ;

rest_call   ::= COMMA call_arg rest_call
            |
            ;

/* Grammar for each argument when calling a function */
call_arg    ::= STRING_LITERAL
            |   if_stmt
            |   call
            |   concat
            |   REVERSE STRING_LITERAL
            ;

/* Supporting concatenation */
concat      ::= call_arg PLUS call_arg
            ;

if_stmt     ::= IF LPAREN prefix_stmt RPAREN call_arg ELSE call_arg
            ;

/* Supporting prefix which is the only logical expression */
prefix_stmt ::= call_arg PREFIX call_arg
            ;