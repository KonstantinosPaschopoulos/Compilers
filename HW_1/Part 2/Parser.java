
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\006\011\000\002\006\010" +
    "\000\002\007\004\000\002\010\005\000\002\010\002\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\004\000\002\016\003\000\002\020" +
    "\006\000\002\020\005\000\002\023\004\000\002\022\005" +
    "\000\002\022\002\000\002\017\005\000\002\021\011\000" +
    "\002\025\005\000\002\004\004\000\002\004\002\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\004\000\002\005\006\000\002\005\005" +
    "\000\002\011\004\000\002\015\005\000\002\015\002\000" +
    "\002\013\005\000\002\014\011\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\014\002\uffe9\012\012\015\016\016\015\017" +
    "\010\001\002\000\004\002\123\001\002\000\026\002\uffe7" +
    "\004\uffe7\006\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\001\002\000\014\002\uffe9\012\012" +
    "\015\016\016\015\017\010\001\002\000\004\002\001\001" +
    "\002\000\026\002\uffe8\004\uffe8\006\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\001\002\000" +
    "\004\002\ufffe\001\002\000\004\005\111\001\002\000\016" +
    "\002\uffe9\004\030\012\012\015\016\016\021\017\010\001" +
    "\002\000\026\002\uffe5\004\uffe5\006\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\001\002\000" +
    "\004\005\035\001\002\000\012\012\012\015\016\016\021" +
    "\017\010\001\002\000\026\002\uffe6\004\uffe6\006\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\001\002\000\026\002\uffe4\004\uffe4\006\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\001\002" +
    "\000\004\005\022\001\002\000\014\006\025\012\012\015" +
    "\016\016\021\017\010\001\002\000\004\006\034\001\002" +
    "\000\010\004\030\006\uffdf\011\026\001\002\000\026\002" +
    "\uffe2\004\uffe2\006\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\001\002\000\012\012\012\015" +
    "\016\016\021\017\010\001\002\000\004\006\uffe1\001\002" +
    "\000\012\012\012\015\016\016\021\017\010\001\002\000" +
    "\026\002\uffde\004\uffde\006\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\001\002\000\010\004" +
    "\030\006\uffdf\011\026\001\002\000\004\006\uffe0\001\002" +
    "\000\026\002\uffe3\004\uffe3\006\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\001\002\000\014" +
    "\006\037\012\012\015\016\016\040\017\010\001\002\000" +
    "\004\006\104\001\002\000\020\002\uffe2\004\uffe2\007\045" +
    "\012\uffe2\015\uffe2\016\uffe2\017\uffe2\001\002\000\010\005" +
    "\022\006\ufff9\011\041\001\002\000\004\016\043\001\002" +
    "\000\004\006\ufffb\001\002\000\006\006\ufff9\011\041\001" +
    "\002\000\004\006\ufffa\001\002\000\012\012\054\015\055" +
    "\016\051\017\053\001\002\000\006\004\057\010\103\001" +
    "\002\000\016\004\ufff7\006\ufff7\010\ufff7\011\ufff7\013\ufff7" +
    "\014\ufff7\001\002\000\016\004\ufff6\006\ufff6\010\ufff6\011" +
    "\ufff6\013\ufff6\014\ufff6\001\002\000\020\004\ufff3\005\072" +
    "\006\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3\001\002\000" +
    "\016\004\ufff5\006\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5" +
    "\001\002\000\016\004\ufff8\006\ufff8\010\ufff8\011\ufff8\013" +
    "\ufff8\014\ufff8\001\002\000\004\005\061\001\002\000\012" +
    "\012\054\015\055\016\051\017\053\001\002\000\016\004" +
    "\ufff4\006\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\001\002" +
    "\000\012\012\054\015\055\016\051\017\053\001\002\000" +
    "\016\004\uffed\006\uffed\010\uffed\011\uffed\013\uffed\014\uffed" +
    "\001\002\000\012\012\054\015\055\016\051\017\053\001" +
    "\002\000\004\006\066\001\002\000\006\004\057\014\064" +
    "\001\002\000\012\012\054\015\055\016\051\017\053\001" +
    "\002\000\006\004\057\006\uffeb\001\002\000\012\012\054" +
    "\015\055\016\051\017\053\001\002\000\006\004\057\013" +
    "\070\001\002\000\012\012\054\015\055\016\051\017\053" +
    "\001\002\000\016\004\057\006\uffec\010\uffec\011\uffec\013" +
    "\uffec\014\uffec\001\002\000\014\006\075\012\054\015\055" +
    "\016\051\017\053\001\002\000\004\006\102\001\002\000" +
    "\010\004\057\006\uffee\011\076\001\002\000\016\004\ufff1" +
    "\006\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1\001\002\000" +
    "\012\012\054\015\055\016\051\017\053\001\002\000\004" +
    "\006\ufff0\001\002\000\010\004\057\006\uffee\011\076\001" +
    "\002\000\004\006\uffef\001\002\000\016\004\ufff2\006\ufff2" +
    "\010\ufff2\011\ufff2\013\ufff2\014\ufff2\001\002\000\014\002" +
    "\ufffc\012\ufffc\015\ufffc\016\ufffc\017\ufffc\001\002\000\004" +
    "\007\105\001\002\000\012\012\054\015\055\016\051\017" +
    "\053\001\002\000\006\004\057\010\107\001\002\000\014" +
    "\002\ufffd\012\ufffd\015\ufffd\016\ufffd\017\ufffd\001\002\000" +
    "\004\002\uffea\001\002\000\012\012\012\015\016\016\021" +
    "\017\010\001\002\000\006\004\030\014\120\001\002\000" +
    "\004\006\114\001\002\000\012\012\012\015\016\016\021" +
    "\017\010\001\002\000\006\004\030\013\116\001\002\000" +
    "\012\012\012\015\016\016\021\017\010\001\002\000\026" +
    "\002\uffdd\004\030\006\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\001\002\000\012\012\012" +
    "\015\016\016\021\017\010\001\002\000\006\004\030\006" +
    "\uffdc\001\002\000\004\002\uffff\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\022\002\003\003\006\004\010\005\016\006" +
    "\005\012\012\013\013\014\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\121\004\010\005\016\006" +
    "\005\012\012\013\013\014\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\107\005\016\012\012\013\013\014\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\016\012" +
    "\017\013\013\014\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\016\011\022\012" +
    "\023\013\013\014\004\001\001\000\002\001\001\000\004" +
    "\015\026\001\001\000\002\001\001\000\012\005\016\012" +
    "\031\013\013\014\004\001\001\000\002\001\001\000\012" +
    "\005\016\012\030\013\013\014\004\001\001\000\002\001" +
    "\001\000\004\015\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\016\007\035\011\022\012\023\013" +
    "\013\014\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\043\001\001\000\002\001\001\000\012" +
    "\016\045\017\051\020\047\021\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\055\017\051\020\047\021\046\001\001\000\002" +
    "\001\001\000\012\016\057\017\051\020\047\021\046\001" +
    "\001\000\002\001\001\000\014\016\062\017\051\020\047" +
    "\021\046\025\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\064\017\051\020\047\021\046\001\001" +
    "\000\002\001\001\000\012\016\066\017\051\020\047\021" +
    "\046\001\001\000\002\001\001\000\012\016\070\017\051" +
    "\020\047\021\046\001\001\000\002\001\001\000\014\016" +
    "\073\017\051\020\047\021\046\023\072\001\001\000\002" +
    "\001\001\000\004\022\076\001\001\000\002\001\001\000" +
    "\012\016\077\017\051\020\047\021\046\001\001\000\002" +
    "\001\001\000\004\022\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\105\017\051\020\047\021\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\016" +
    "\012\111\013\013\014\004\024\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\016\012\114\013\013" +
    "\014\004\001\001\000\002\001\001\000\012\005\016\012" +
    "\116\013\013\014\004\001\001\000\002\001\001\000\012" +
    "\005\016\012\120\013\013\014\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // syn ::= expr_list 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("public class Main {\n" + e + "}"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("syn",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= syn EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= def expr_list 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d + re; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= call_list 
            {
              String RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "public static void main(String[] args) {\n" + cl + "}\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // def ::= IDENTIFIER LPAREN def_args RPAREN LCURLY body RCURLY 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ar = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "public static String " + id + "(" + ar + ") {\n" + "return " + b + ";" + "\n}\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def ::= IDENTIFIER LPAREN RPAREN LCURLY body RCURLY 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "public static String " + id + "() {\n" + "return " + b + ";" + "\n}\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // def_args ::= IDENTIFIER rest_args 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int raleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int raright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ra = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "String " + id + ra; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_args",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // rest_args ::= COMMA IDENTIFIER rest_args 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int raleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int raright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ra = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ", " + "String " + id + ra; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_args",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // rest_args ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_args",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body ::= STRING_LITERAL 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = str; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // body ::= body_if 
            {
              String RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = iff; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // body ::= body_func 
            {
              String RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = func; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // body ::= body_concat 
            {
              String RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String con = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = con; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= REVERSE body 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "new StringBuffer(" + b + ").reverse().toString()"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // body ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // body_func ::= IDENTIFIER LPAREN body_args RPAREN 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = id + "(" + arg + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_func",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // body_func ::= IDENTIFIER LPAREN RPAREN 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = id + "(" + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_func",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body_args ::= body re_bod_args 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b + re; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_args",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // re_bod_args ::= COMMA body re_bod_args 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ", " + b + re; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("re_bod_args",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // re_bod_args ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("re_bod_args",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body_concat ::= body PLUS body 
            {
              String RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b1 + " + " + b2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_concat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // body_if ::= IF LPAREN body_prefix RPAREN body ELSE body 
            {
              String RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "(" + bool + " ? " + b1 + " : " + b2 + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_if",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // body_prefix ::= body PREFIX body 
            {
              String RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b2 + ".startsWith(" + b1 + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_prefix",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // call_list ::= call_stm call_list 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "System.out.println(" + c + ");\n" + cl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // call_list ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // call_stm ::= STRING_LITERAL 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = str; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_stm",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // call_stm ::= if_stmt 
            {
              String RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ifs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_stm",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // call_stm ::= call 
            {
              String RESULT =null;
		int calleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int calright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cal = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cal; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_stm",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // call_stm ::= concat 
            {
              String RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String con = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = con; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_stm",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // call_stm ::= REVERSE call_stm 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "new StringBuffer(" + ca + ").reverse().toString()"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_stm",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // call ::= IDENTIFIER LPAREN call_args RPAREN 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = id + "(" + ca + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // call ::= IDENTIFIER LPAREN RPAREN 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = id + "()"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // call_args ::= call_stm rest_call 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ca + re; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rest_call ::= COMMA call_stm rest_call 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ", " + ca + re; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_call",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rest_call ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_call",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // concat ::= call_stm PLUS call_stm 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c1 + " + " + c2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if_stmt ::= IF LPAREN prefix_stmt RPAREN call_stm ELSE call_stm 
            {
              String RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "(" + bool + " ? " + c1 + " : " + c2 + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // prefix_stmt ::= call_stm PREFIX call_stm 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c2 + ".startsWith(" + c1 + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefix_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
