
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\003\000\002\007\011" +
    "\000\002\007\010\000\002\010\004\000\002\011\005\000" +
    "\002\011\002\000\002\012\003\000\002\012\003\000\002" +
    "\012\002\000\002\005\004\000\002\005\004\000\002\005" +
    "\002\000\002\006\006\000\002\006\005\000\002\013\004" +
    "\000\002\017\005\000\002\017\002\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\005\000\002\016\010\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\016\005\001\002\000\004\002\076\001" +
    "\002\000\004\005\073\001\002\000\010\002\ufff2\012\016" +
    "\016\014\001\002\000\004\002\001\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\uffff\001\002\000\010\002\ufff2" +
    "\012\016\016\046\001\002\000\010\002\ufff2\012\016\016" +
    "\046\001\002\000\004\005\030\001\002\000\010\002\ufff2" +
    "\012\016\016\014\001\002\000\004\005\017\001\002\000" +
    "\004\017\021\001\002\000\004\006\024\001\002\000\004" +
    "\014\022\001\002\000\004\017\023\001\002\000\004\006" +
    "\uffe6\001\002\000\004\013\025\001\002\000\004\017\026" +
    "\001\002\000\016\002\uffe7\004\uffe7\006\uffe7\011\uffe7\012" +
    "\uffe7\016\uffe7\001\002\000\004\002\ufffe\001\002\000\012" +
    "\006\036\012\016\016\040\017\032\001\002\000\010\004" +
    "\uffeb\006\uffeb\011\uffeb\001\002\000\010\004\uffec\006\uffec" +
    "\011\uffec\001\002\000\004\006\070\001\002\000\004\006" +
    "\064\001\002\000\010\004\060\006\uffed\011\057\001\002" +
    "\000\012\002\ufff0\007\051\012\ufff0\016\ufff0\001\002\000" +
    "\010\004\uffe9\006\uffe9\011\uffe9\001\002\000\010\005\043" +
    "\006\ufff8\011\042\001\002\000\010\004\uffea\006\uffea\011" +
    "\uffea\001\002\000\004\016\047\001\002\000\012\006\045" +
    "\012\016\016\046\017\032\001\002\000\004\006\ufffa\001" +
    "\002\000\016\002\ufff0\004\ufff0\006\ufff0\011\ufff0\012\ufff0" +
    "\016\ufff0\001\002\000\004\005\043\001\002\000\006\006" +
    "\ufff8\011\042\001\002\000\004\006\ufff9\001\002\000\010" +
    "\010\ufff5\016\053\017\054\001\002\000\004\010\055\001" +
    "\002\000\004\010\ufff7\001\002\000\004\010\ufff6\001\002" +
    "\000\010\002\ufffb\012\ufffb\016\ufffb\001\002\000\004\006" +
    "\uffef\001\002\000\010\012\016\016\046\017\032\001\002" +
    "\000\010\012\016\016\046\017\032\001\002\000\010\004" +
    "\uffe8\006\uffe8\011\uffe8\001\002\000\010\004\060\006\uffed" +
    "\011\057\001\002\000\004\006\uffee\001\002\000\004\007" +
    "\065\001\002\000\010\010\ufff5\016\053\017\054\001\002" +
    "\000\004\010\067\001\002\000\010\002\ufffc\012\ufffc\016" +
    "\ufffc\001\002\000\016\002\ufff1\004\ufff1\006\ufff1\011\ufff1" +
    "\012\ufff1\016\ufff1\001\002\000\004\002\ufff4\001\002\000" +
    "\004\002\ufff3\001\002\000\006\006\074\016\075\001\002" +
    "\000\004\007\051\001\002\000\006\006\ufff8\011\042\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\010\002\003\003\006\007\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\010\005\007" +
    "\006\012\007\014\016\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\071\006\012" +
    "\016\011\001\001\000\010\005\070\006\012\016\011\001" +
    "\001\000\002\001\001\000\014\004\026\005\007\006\012" +
    "\007\014\016\011\001\001\000\002\001\001\000\004\020" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\040" +
    "\010\033\013\032\014\034\015\036\016\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\040\013\032\014\034\015" +
    "\036\016\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\047\001\001\000\002\001" +
    "\001\000\004\012\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\040\014\061\015\036\016\030\001\001" +
    "\000\012\006\040\014\060\015\036\016\030\001\001\000" +
    "\002\001\001\000\004\017\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\033\001\001\000\002\001" +
    "\001\000\004\011\043\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // syn ::= expr_list 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("syn",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= syn EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= def rest_expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // rest_expr ::= def rest_expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // rest_expr ::= call_list 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def ::= IDENTIFIER LPAREN def_args RPAREN LCURLY def_body RCURLY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // def ::= IDENTIFIER LPAREN RPAREN LCURLY def_body RCURLY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // def_args ::= IDENTIFIER rest_args 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_args",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // rest_args ::= COMMA IDENTIFIER rest_args 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // rest_args ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_body ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_body",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // def_body ::= STRING_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_body",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // def_body ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_body",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // call_list ::= call call_list 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // call_list ::= if_stmt call_list 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // call_list ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // call ::= IDENTIFIER LPAREN call_args RPAREN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // call ::= IDENTIFIER LPAREN RPAREN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // call_args ::= call_arg rest_call 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_args",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // rest_call ::= COMMA call_arg rest_call 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_call",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rest_call ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_call",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // call_arg ::= STRING_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_arg",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // call_arg ::= if_stmt 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_arg",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // call_arg ::= call 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_arg",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // call_arg ::= concat 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_arg",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // concat ::= call_arg PLUS call_arg 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if_stmt ::= IF LPAREN prefix_stmt RPAREN ELSE STRING_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // prefix_stmt ::= STRING_LITERAL PREFIX STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefix_stmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
