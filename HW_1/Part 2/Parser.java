
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\003\000\002\007\011" +
    "\000\002\007\010\000\002\010\004\000\002\011\005\000" +
    "\002\011\002\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\004\000\002\017" +
    "\004\000\002\017\003\000\002\021\006\000\002\021\005" +
    "\000\002\020\005\000\002\022\011\000\002\024\005\000" +
    "\002\005\004\000\002\005\004\000\002\005\002\000\002" +
    "\006\006\000\002\006\005\000\002\012\004\000\002\016" +
    "\005\000\002\016\002\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\004\000" +
    "\002\014\005\000\002\015\011\000\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\016\005\001\002\000\004\002\127\001" +
    "\002\000\004\005\124\001\002\000\010\002\uffe9\012\016" +
    "\016\014\001\002\000\004\002\001\001\002\000\004\002" +
    "\ufffd\001\002\000\010\002\uffe9\012\016\016\025\001\002" +
    "\000\004\002\uffff\001\002\000\010\002\uffe9\012\016\016" +
    "\025\001\002\000\004\005\053\001\002\000\010\002\uffe9" +
    "\012\016\016\014\001\002\000\004\005\017\001\002\000" +
    "\012\012\016\015\027\016\025\017\021\001\002\000\022" +
    "\002\uffe2\004\uffe2\006\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\016\uffe2\001\002\000\022\002\uffe3\004\uffe3\006\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\016\uffe3\001\002\000" +
    "\006\004\037\014\050\001\002\000\004\006\044\001\002" +
    "\000\022\002\uffe0\004\uffe0\006\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\016\uffe0\001\002\000\004\005\031\001\002" +
    "\000\022\002\uffe1\004\uffe1\006\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\016\uffe1\001\002\000\004\017\030\001\002" +
    "\000\022\002\uffdf\004\uffdf\006\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\016\uffdf\001\002\000\014\006\034\012\016" +
    "\015\027\016\025\017\021\001\002\000\004\006\043\001" +
    "\002\000\010\004\037\006\uffe4\011\035\001\002\000\022" +
    "\002\uffe7\004\uffe7\006\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\016\uffe7\001\002\000\012\012\016\015\027\016\025" +
    "\017\021\001\002\000\004\006\uffe6\001\002\000\012\012" +
    "\016\015\027\016\025\017\021\001\002\000\022\002\uffde" +
    "\004\uffde\006\uffde\011\uffde\012\uffde\013\uffde\014\uffde\016" +
    "\uffde\001\002\000\010\004\037\006\uffe4\011\035\001\002" +
    "\000\004\006\uffe5\001\002\000\022\002\uffe8\004\uffe8\006" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\001\002" +
    "\000\012\012\016\015\027\016\025\017\021\001\002\000" +
    "\006\004\037\013\046\001\002\000\012\012\016\015\027" +
    "\016\025\017\021\001\002\000\022\002\uffdd\004\037\006" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\016\uffdd\001\002" +
    "\000\012\012\016\015\027\016\025\017\021\001\002\000" +
    "\006\004\037\006\uffdc\001\002\000\004\002\ufffe\001\002" +
    "\000\014\006\055\012\016\015\027\016\056\017\021\001" +
    "\002\000\004\006\116\001\002\000\012\002\uffe7\007\063" +
    "\012\uffe7\016\uffe7\001\002\000\010\005\031\006\ufff8\011" +
    "\057\001\002\000\004\016\061\001\002\000\004\006\ufffa" +
    "\001\002\000\006\006\ufff8\011\057\001\002\000\004\006" +
    "\ufff9\001\002\000\012\012\073\015\072\016\067\017\071" +
    "\001\002\000\006\004\077\010\115\001\002\000\014\004" +
    "\ufff6\006\ufff6\010\ufff6\013\ufff6\014\ufff6\001\002\000\014" +
    "\004\ufff5\006\ufff5\010\ufff5\013\ufff5\014\ufff5\001\002\000" +
    "\016\004\ufff1\005\111\006\ufff1\010\ufff1\013\ufff1\014\ufff1" +
    "\001\002\000\014\004\ufff4\006\ufff4\010\ufff4\013\ufff4\014" +
    "\ufff4\001\002\000\014\004\ufff7\006\ufff7\010\ufff7\013\ufff7" +
    "\014\ufff7\001\002\000\006\016\107\017\110\001\002\000" +
    "\004\005\074\001\002\000\012\012\073\015\072\016\067" +
    "\017\071\001\002\000\004\006\103\001\002\000\006\004" +
    "\077\014\100\001\002\000\012\012\073\015\072\016\067" +
    "\017\071\001\002\000\012\012\073\015\072\016\067\017" +
    "\071\001\002\000\006\004\077\006\uffec\001\002\000\014" +
    "\004\uffee\006\uffee\010\uffee\013\uffee\014\uffee\001\002\000" +
    "\012\012\073\015\072\016\067\017\071\001\002\000\006" +
    "\004\077\013\105\001\002\000\012\012\073\015\072\016" +
    "\067\017\071\001\002\000\014\004\077\006\uffed\010\uffed" +
    "\013\uffed\014\uffed\001\002\000\014\004\ufff2\006\ufff2\010" +
    "\ufff2\013\ufff2\014\ufff2\001\002\000\014\004\ufff3\006\ufff3" +
    "\010\ufff3\013\ufff3\014\ufff3\001\002\000\014\006\113\012" +
    "\073\015\072\016\067\017\071\001\002\000\006\004\077" +
    "\006\114\001\002\000\014\004\uffef\006\uffef\010\uffef\013" +
    "\uffef\014\uffef\001\002\000\014\004\ufff0\006\ufff0\010\ufff0" +
    "\013\ufff0\014\ufff0\001\002\000\010\002\ufffb\012\ufffb\016" +
    "\ufffb\001\002\000\004\007\117\001\002\000\012\012\073" +
    "\015\072\016\067\017\071\001\002\000\006\004\077\010" +
    "\121\001\002\000\010\002\ufffc\012\ufffc\016\ufffc\001\002" +
    "\000\004\002\uffeb\001\002\000\004\002\uffea\001\002\000" +
    "\006\006\125\016\126\001\002\000\004\007\063\001\002" +
    "\000\006\006\ufff8\011\057\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\010\002\003\003\006\007\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\011\005\007" +
    "\006\012\007\014\015\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\122\006\012\015\010\001\001" +
    "\000\002\001\001\000\010\005\121\006\012\015\010\001" +
    "\001\000\002\001\001\000\014\004\051\005\007\006\012" +
    "\007\014\015\010\001\001\000\002\001\001\000\014\006" +
    "\025\013\021\014\023\015\017\023\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\025\012" +
    "\031\013\032\014\023\015\017\001\001\000\002\001\001" +
    "\000\004\016\035\001\001\000\002\001\001\000\012\006" +
    "\025\013\040\014\023\015\017\001\001\000\002\001\001" +
    "\000\012\006\025\013\037\014\023\015\017\001\001\000" +
    "\002\001\001\000\004\016\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\025\013\044\014\023\015" +
    "\017\001\001\000\002\001\001\000\012\006\025\013\046" +
    "\014\023\015\017\001\001\000\002\001\001\000\012\006" +
    "\025\013\050\014\023\015\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\025\010\053\012\031\013" +
    "\032\014\023\015\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\061\001\001\000\002\001\001" +
    "\000\012\017\063\020\067\021\065\022\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\075\020\067\021\065" +
    "\022\064\024\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\101\020\067\021\065\022\064\001\001" +
    "\000\012\017\100\020\067\021\065\022\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\103\020\067" +
    "\021\065\022\064\001\001\000\002\001\001\000\012\017" +
    "\105\020\067\021\065\022\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\111\020" +
    "\067\021\065\022\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\117\020\067\021\065\022\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\053\001\001\000\002\001\001" +
    "\000\004\011\057\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // syn ::= expr_list 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("syn",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= syn EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= def rest_expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // rest_expr ::= def rest_expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // rest_expr ::= call_list 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def ::= IDENTIFIER LPAREN def_args RPAREN LCURLY body RCURLY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // def ::= IDENTIFIER LPAREN RPAREN LCURLY body RCURLY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // def_args ::= IDENTIFIER rest_args 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_args",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // rest_args ::= COMMA IDENTIFIER rest_args 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // rest_args ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // body ::= STRING_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // body ::= body_if 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // body ::= body_func 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= body_concat 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // body ::= REVERSE STRING_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // body ::= REVERSE IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // body ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body_func ::= IDENTIFIER LPAREN body RPAREN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_func",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // body_func ::= IDENTIFIER LPAREN RPAREN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_func",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body_concat ::= body PLUS body 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_concat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body_if ::= IF LPAREN body_prefix RPAREN body ELSE body 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_if",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // body_prefix ::= body PREFIX body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_prefix",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // call_list ::= call call_list 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // call_list ::= if_stmt call_list 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // call_list ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // call ::= IDENTIFIER LPAREN call_args RPAREN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // call ::= IDENTIFIER LPAREN RPAREN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // call_args ::= call_arg rest_call 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_args",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rest_call ::= COMMA call_arg rest_call 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_call",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rest_call ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_call",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // call_arg ::= STRING_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_arg",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // call_arg ::= if_stmt 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_arg",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // call_arg ::= call 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_arg",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // call_arg ::= concat 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_arg",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // call_arg ::= REVERSE STRING_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_arg",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // concat ::= call_arg PLUS call_arg 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if_stmt ::= IF LPAREN prefix_stmt RPAREN call_arg ELSE call_arg 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // prefix_stmt ::= call_arg PREFIX call_arg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefix_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
